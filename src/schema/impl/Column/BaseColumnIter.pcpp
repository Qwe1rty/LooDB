#include "../../api/Column/BaseColumn.h"
#include "../../api/Entry/IntEntry.h"

#include <stack>
#include <iostream>


class BaseColumn::Impl::Iterator {

public:

  std::pair<std::unique_ptr<Entry>, uint32_t> operator* ();
  Iterator& operator++ ();
  bool operator!= (const Column::Iterator&);
  bool operator== (const Column::Iterator&);

  Iterator(Impl&, std::stack<uint32_t> path, std::stack<uint32_t> cells);

private:

  Impl& parent_;
  std::stack<uint32_t> path_;
  std::stack<uint32_t> cells_;
};

struct BaseColumn::Iterator::Impl {

  // Unfortunate double pointer indirection :/
  // Good enough for now, I guess
  std::unique_ptr<BaseColumn::Impl::Iterator> impl_;

  explicit Impl(std::unique_ptr<BaseColumn::Impl::Iterator>);
};


/*
 * Public methods
 */

std::unique_ptr<BaseColumn::Impl::Iterator> BaseColumn::Impl::begin_() {

  const auto header = fetch_header();

  std::stack<uint32_t> path{};
  std::stack<uint32_t> cells{};

  if (!header->empty_) {

    path.push(header->root_);
    cells.push(0);

    uint32_t child_index = fetch_node(path.top())->node_.front().left_;

    while (child_index > 0) {

      path.push(child_index);
      cells.push(0);

      child_index = fetch_node(child_index)->node_.front().left_;
    }
  }

  return std::make_unique<BaseColumn::Impl::Iterator>(
    *this,
    std::move(path),
    std::move(cells)
  );
}

std::unique_ptr<BaseColumn::Impl::Iterator> BaseColumn::Impl::end_() {

  return std::make_unique<BaseColumn::Impl::Iterator>(
    *this,
    std::stack<uint32_t>{},
    std::stack<uint32_t>{}
  );
}

std::unique_ptr<BaseColumn::Impl::Iterator> BaseColumn::Impl::find_(const Entry& entry) {

  const auto header = fetch_header();

  std::stack<uint32_t> path{};
  std::stack<uint32_t> cells{};

  if (!header->empty_) backtrack(entry, path, cells, header->root_);

  // Return the created iterator. If the entry was not found, the returned iterator will be
  // equivalent to the end iterator: end_()
  return std::make_unique<BaseColumn::Impl::Iterator>(
    *this,
    std::move(path),
    std::move(cells)
  );
}


/*
 * Private methods
 */


// The backtrack(...) method will attempt to find the first instance where the entry `const Entry& entry`
// parameter is found.
//
// The function returns true if there was an element in the subtree provided by `node_index` that equals
// `entry`, with the `path` and `cells` variables updated accordingly to point to it. If the function
// returns false, that means that no such entry was found, and the `path` and `cells` variables remain
// unchanged.
bool BaseColumn::Impl::backtrack(const Entry& entry,
                                 std::stack<uint32_t>& path,
                                 std::stack<uint32_t>& cells,
                                 const uint32_t node_index) {

  if (node_index == 0) return false; // Return false if a leaf tried to recurse deeper

  // Record current node
  path.push(node_index);
  auto node = fetch_node(node_index);

  // Find the index where the entry would be located, if it's in this node
  uint32_t cell{0};
  while (cell < node->node_.size() && entry > *fetch_entry(node->node_.at(cell).key_)) {
    ++cell;
  }
  cells.push(cell);

  // If it's been found, then mark this function to return true. Even if there's no further
  // equal entries found in further recursive calls, we can always return to this current node.
  bool current_found = cell < node->node_.size() && entry == *fetch_entry(node->node_.at(cell).key_);

  // Try to see if the entry is found deeper within the tree structure
  uint32_t child_index = cell < node->node_.size() ?
    node->node_.at(cell).left_ :
    node->right_;
  bool descendents_found = backtrack(entry, path, cells, child_index);

  // If the entry hasn't been found within the current node or any of its descendents, then pop
  // out the current node's entry in the stack
  bool found = current_found || descendents_found;
  if (!found) {
    path.pop();
    cells.pop();
  }
  return found;
}


/*
 * Iterator implementation
 */

std::pair<std::unique_ptr<Entry>, uint32_t> BaseColumn::Impl::Iterator::operator*() {

  if (path_.empty() || cells_.empty()) return std::make_pair(nullptr, 0);
  else {
    auto page = parent_.fetch_node(path_.top())->node_.at(cells_.top());
    return std::make_pair(
      parent_.fetch_entry(page.key_),
      page.value_
    );
  }
}

BaseColumn::Impl::Iterator& BaseColumn::Impl::Iterator::operator++() {

  // If it's not already at the end or just empty
  if (!path_.empty() && !cells_.empty()) {

//    for (int i = 0; i < path_.size(); ++i) std::cout << "  ";
//    std::cout << "path_.top() page: " << std::flush;
//    std::cout << path_.top() << std::flush;
//    std::cout << ", cells_.top() index: " << std::flush;
//    std::cout << cells_.top() << std::flush;
//    std::cout << ", row/PK index: " << std::flush;
//    std::cout << parent_.fetch_node(path_.top())->node_.at(cells_.top()).value_ << std::flush;
//    std::cout << ", row/PK value: " << std::flush;
//    std::cout << static_cast<IntEntry*>(parent_.fetch_entry(parent_.fetch_node(path_.top())->node_.at(cells_.top()).value_).get())->getVal() << std::flush;
//    std::cout << std::endl;

    // Increment cell value for this B-Tree node
    uint32_t cell = cells_.top() + 1;
    cells_.pop();
    cells_.push(cell);

    // Fetch the current node, and see if we need to backtrack or recurse
    auto node = parent_.fetch_node(path_.top());

    // If it's not reached the end of the node, increment or increment + recurse
    if (cells_.top() < node->node_.size()) {

      // Keep recursing if there's children
      uint32_t child_index = node->node_.at(cells_.top()).left_;
      while (child_index > 0) {
        cells_.push(0);
        path_.push(child_index);

        node = parent_.fetch_node(path_.top());
        child_index = node->node_.at(cells_.top()).left_;
      }
    }

    // See if there's a rightmost child, and recurse into it if it exists
    else if (node->right_ > 0) {
      cells_.push(0);
      path_.push(node->right_);

      // Traverse to the right node
      node = parent_.fetch_node(path_.top());

      // Keep recursing if there's children
      uint32_t child_index = node->node_.at(cells_.top()).left_;
      while (child_index > 0) {
        cells_.push(0);
        path_.push(child_index);

        node = parent_.fetch_node(path_.top());
        child_index = node->node_.at(cells_.top()).left_;
      }
    }

    // Otherwise backtrack and unwind the stack
    else {
      while (cells_.top() >= node->node_.size()) {
        cells_.pop();
        path_.pop();

        if (path_.empty() || cells_.empty()) break;
        node = parent_.fetch_node(path_.top());
      }
    }
  }

  return *this;
}

bool BaseColumn::Impl::Iterator::operator!=(const Column::Iterator& src) {
  return !(*this == src);
}

bool BaseColumn::Impl::Iterator::operator==(const Column::Iterator& src) {

  auto* src_cast = dynamic_cast<BaseColumn::Iterator const*>(&src);

  if (src_cast) {
    const auto& iter = *src_cast->impl_->impl_;
    return iter.path_ == path_ &&
           iter.cells_ == cells_;
  }

  return false;
}

BaseColumn::Impl::Iterator::Iterator(BaseColumn::Impl& parent,
                                     std::stack<uint32_t> path,
                                     std::stack<uint32_t> cells) :
  parent_{parent},
  path_{std::move(path)},
  cells_{std::move(cells)}
{}


/*
 * BaseColumn::Iterator.h implementations
 */

std::pair<std::unique_ptr<Entry>, uint32_t> BaseColumn::Iterator::operator*() {
  return **impl_->impl_;
}

BaseColumn::Iterator& BaseColumn::Iterator::operator++() {
  impl_->impl_->operator++();
  return *this;
}

bool BaseColumn::Iterator::operator!=(const Column::Iterator& src) {
  return !(*this == src);
}

bool BaseColumn::Iterator::operator==(const Column::Iterator& src) {
  return impl_->impl_->operator==(src);
}

BaseColumn::Iterator::Impl::Impl(std::unique_ptr<BaseColumn::Impl::Iterator> impl) :
  impl_{std::move(impl)}
{}


/*
 * BaseColumn.h implementations
 */

std::unique_ptr<Column::Iterator> BaseColumn::begin_() {
  return std::make_unique<BaseColumn::Iterator>(
    std::make_unique<BaseColumn::Iterator::Impl>(impl_->begin_())
  );
}

std::unique_ptr<Column::Iterator> BaseColumn::end_() {
  return std::make_unique<BaseColumn::Iterator>(
    std::make_unique<BaseColumn::Iterator::Impl>(impl_->end_())
  );
}

std::unique_ptr<Column::Iterator> BaseColumn::find_(const Entry& entry) {
  return std::make_unique<BaseColumn::Iterator>(
    std::make_unique<BaseColumn::Iterator::Impl>(impl_->find_(entry))
  );
}

BaseColumn::Iterator::Iterator(std::unique_ptr<BaseColumn::Iterator::Impl> impl) :
  impl_{std::move(impl)}
{}
